<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Newkys Brain Farts.</title><link>http://richydelaney.com/snippets</link>
<description>Snippets of all things tech and otherwise.</description><language>en</language>
<lastBuildDate>Thu, 14 Mar 2013 12:00:43 +0000</lastBuildDate>
<pubDate>Thu, 14 Mar 2013 12:00:43 +0000</pubDate>
<atom:link href="http://richydelaney.com/snippets/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
A useful bash function for coding with git.
</title><description><![CDATA[

Ever commit some code for review, and get some comments. Want to quickly open vim up with the files from the last commit. I have created a function in my .bashrc to accomadate this. To do this, I use git diff with --name-only:
<pre>
function vmod {
vim -p `git diff --name-only $1`
}
</pre>
Now on a bash shell, you can do the following to grab all the edited files from the last commit:
<pre>
$ vmod HEAD~1
</pre>
This will open (in tabs) all the previously edited files.
<!-- text end -->
<p id='twitter'>Comments? &nbsp;
<a href="https://twitter.com/share" class="twitter-share-button" data-text="&lt;Type your comment here but please leave the URL so that other people can follow the comments&gt;" data-url="http://richydelaney.com/snippets/a-useful-bash-function-for-coding-with-git.html"
 data-via="RichyDelaney"
>Tweet</a>	<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
</p>
]]></description><link>http://richydelaney.com/snippets/a-useful-bash-function-for-coding-with-git.html</link>
<guid>http://richydelaney.com/snippets/a-useful-bash-function-for-coding-with-git.html</guid>
<dc:creator>Richy Delaney</dc:creator>
<pubDate>Thu, 14 Mar 2013 11:59:00 +0000</pubDate></item>
<item><title>
Using grep, named pipes and some vim trickery for refactoring.
</title><description><![CDATA[

Thought I would pen a post about how I use a mixture of the above tools to do some naming refactoring in vim.
First, I use grep with a load of flags (to specify things like only python files, case insensitivity). I also include the flag to only print the filenames, I then pipe these into a named pipe as follows:
<pre>
grep -il "some_function_name" > /tmp/named_pipe
</pre>
I then open all these files in separate tabs in vim using the following (be careful where you are when u run vim, as the directory structure is important.
<pre>
vim -p `cat /tmp/named_pipe`
</pre>
At this point, you can do a mass refactor of that search term as follows. Lets say I want to change "some_function_name" to "function_name". In vim, I do the following:
<pre>
:bufdo %s/some_function_name/function_name/gc | update
</pre>
<!-- text end -->
<p id='twitter'>Comments? &nbsp;
<a href="https://twitter.com/share" class="twitter-share-button" data-text="&lt;Type your comment here but please leave the URL so that other people can follow the comments&gt;" data-url="http://richydelaney.com/snippets/using-grep-named-pipes-and-some-vim-trickery-for-refactoring.html"
 data-via="RichyDelaney"
>Tweet</a>	<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
</p>
]]></description><link>http://richydelaney.com/snippets/using-grep-named-pipes-and-some-vim-trickery-for-refactoring.html</link>
<guid>http://richydelaney.com/snippets/using-grep-named-pipes-and-some-vim-trickery-for-refactoring.html</guid>
<dc:creator>Richy Delaney</dc:creator>
<pubDate>Wed, 13 Mar 2013 17:47:00 +0000</pubDate></item>
<item><title>
Python decorator to automagically return to same directory.
</title><description><![CDATA[

<p>This is just a simple little hack which I wrote to allow me to do a load of changing directory in a function but when that function exits, to return to the directory I was in when I entered. This makes it a lot easier to reason about where the current flow of the project is.</p>
<script src="https://gist.github.com/Newky/5151640.js"></script>
<!-- text end -->
<p id='twitter'>Comments? &nbsp;
<a href="https://twitter.com/share" class="twitter-share-button" data-text="&lt;Type your comment here but please leave the URL so that other people can follow the comments&gt;" data-url="http://richydelaney.com/snippets/python-decorator-to-automagically-return-to-same-directory.html"
 data-via="RichyDelaney"
>Tweet</a>	<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
</p>
]]></description><link>http://richydelaney.com/snippets/python-decorator-to-automagically-return-to-same-directory.html</link>
<guid>http://richydelaney.com/snippets/python-decorator-to-automagically-return-to-same-directory.html</guid>
<dc:creator>Richy Delaney</dc:creator>
<pubDate>Wed, 13 Mar 2013 12:32:32 +0000</pubDate></item>
<item><title>
Publishing a git repo using remotes on a remote server
</title><description><![CDATA[

Steps are as follows on remote server:
<ul>
<li>mkdir reponame.git</li>
<li>cd reponame.git</li>
<li>git init --bare</li>
</ul>
<br/>
If you have the remote server set up as an ssh machine in .ssh/config, the process becomes a breeze. Presuming the host is called "remoteserver". You would do the following to add it as a remote in your local git repository.
<pre>
git remote add web remoteserver:reponame.git
</pre>
This also presumes that reponame.git was created in the users home directory that you login as. To push changes, add them to your commits. and just push to the remote using (presuming that the changes you have are on master):
<pre>
git push web master
</pre>
<br/>
Additional trick is to set up a place for this to be pushed to (i.e a bare repo just holds the git data but its inaccessible in the usual way to do that, you can define a hook in "hooks/post-receive". Here is an example script which installs the changes into ~/reponame directory.
<pre>
#!/bin/sh
GIT_WORK_TREE=$HOME/reponame
export GIT_WORK_TREE
git checkout -f
</pre>
<!-- text end -->
<p id='twitter'>Comments? &nbsp;
<a href="https://twitter.com/share" class="twitter-share-button" data-text="&lt;Type your comment here but please leave the URL so that other people can follow the comments&gt;" data-url="http://richydelaney.com/snippets/publishing-a-git-repo-using-remotes-on-a-remote-server.html"
 data-via="RichyDelaney"
>Tweet</a>	<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
</p>
]]></description><link>http://richydelaney.com/snippets/publishing-a-git-repo-using-remotes-on-a-remote-server.html</link>
<guid>http://richydelaney.com/snippets/publishing-a-git-repo-using-remotes-on-a-remote-server.html</guid>
<dc:creator>Richy Delaney</dc:creator>
<pubDate>Tue, 12 Mar 2013 23:33:00 +0000</pubDate></item>
<item><title>
Trying out the bash blog
</title><description><![CDATA[

Recently, I found from Hacker news, this great post about a <a href='http://mmb.pcb.ub.es/~carlesfe/blog/creating-a-simple-blog-system-with-a-500-line-bash-script.html'>500 line bash blogging system.</a>

So as a test for a few days, I am going to see how productive I can be with this new arrangement. It allows me to quickly compose small posts in a <i>relatively</i> simple and easy way using vim, my favourite editor.

I imagine that my posts will be short. Just with snippets of relevantly useful information.

Lets see how it goes.
<!-- text end -->
<p id='twitter'>Comments? &nbsp;
<a href="https://twitter.com/share" class="twitter-share-button" data-text="&lt;Type your comment here but please leave the URL so that other people can follow the comments&gt;" data-url="http://richydelaney.com/snippets/trying-out-the-bash-blog.html"
 data-via="RichyDelaney"
>Tweet</a>	<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
</p>
]]></description><link>http://richydelaney.com/snippets/trying-out-the-bash-blog.html</link>
<guid>http://richydelaney.com/snippets/trying-out-the-bash-blog.html</guid>
<dc:creator>Richy Delaney</dc:creator>
<pubDate>Tue, 12 Mar 2013 22:45:00 +0000</pubDate></item>
</channel></rss>
